{"version":3,"sources":["components/Game.jsx","App.js","reportWebVitals.js","index.js","components/game.module.css"],"names":["myArray","name","count","color","shuffle","arra1","temp","index","ctr","length","Math","floor","random","Board","props","useState","list","setList","useEffect","mountArray","className","styles","container","map","x","cell","h1","style","backgroundColor","button","onClick","changes","console","log","App","Game","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"yQAGMA,EAAU,CACd,CAAEC,KAAM,QAASC,MAAO,EAAGC,MAAO,UAClC,CAAEF,KAAM,QAASC,MAAO,EAAGC,MAAO,QAClC,CAAEF,KAAM,QAASC,MAAO,EAAGC,MAAO,aAClC,CAAEF,KAAM,QAASC,MAAO,EAAGC,MAAO,iBAClC,CAAEF,KAAM,QAASC,MAAO,EAAGC,MAAO,eAClC,CAAEF,KAAM,QAASC,MAAO,EAAGC,MAAO,aAClC,CAAEF,KAAM,QAASC,MAAO,EAAGC,MAAO,aAClC,CAAEF,KAAM,QAASC,MAAO,EAAGC,MAAO,iBAClC,CAAEF,KAAM,QAASC,MAAO,EAAGC,MAAO,SAG9BC,EAAU,SAACC,GAIf,IAHA,IACEC,EACAC,EAFEC,EAAMH,EAAMI,OAGTD,EAAM,GACXD,EAAQG,KAAKC,MAAMD,KAAKE,SAAWJ,GAEnCF,EAAOD,IADPG,GAEAH,EAAMG,GAAOH,EAAME,GACnBF,EAAME,GAASD,EAEjB,OAAOD,GAmCMQ,EAhCD,SAACC,GACb,MAAwBC,mBAASf,GAAjC,mBAAOgB,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACR,IAAMC,EAAaf,EAAQJ,GAC3BiB,EAAQE,KACP,IAQH,OACE,qCACE,qBAAKC,UAAWC,IAAOC,UAAvB,SACGN,EAAKO,KAAI,SAACC,EAAGjB,GAAJ,OACR,qBAAKa,UAAWC,IAAOI,KAAvB,SACE,sBAAKL,UAAWC,IAAOK,GAAIC,MAAO,CAAEC,gBAAiBJ,EAAErB,OAAvD,UACGqB,EAAEvB,KADL,MACcuB,EAAEtB,UAFgBK,QAOtC,wBAAQa,UAAWC,IAAOQ,OAAQC,QAjBhB,WACpB,IAAMC,EAAU3B,EAAQ,YAAIY,IAC5BC,EAAQc,GACRC,QAAQC,IAAI,UAAWjC,EAAS+B,IAc9B,yBCzCSG,MAVf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAACe,EAAD,SCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,mBAAmB,GAAK,oB","file":"static/js/main.807e7eb4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styles from \"./game.module.css\";\n\nconst myArray = [\n  { name: \"color\", count: 0, color: \"orange\" },\n  { name: \"color\", count: 1, color: \"pink\" },\n  { name: \"color\", count: 2, color: \"goldenrod\" },\n  { name: \"color\", count: 3, color: \"palevioletred\" },\n  { name: \"color\", count: 4, color: \"greenyellow\" },\n  { name: \"color\", count: 5, color: \"burlywood\" },\n  { name: \"color\", count: 6, color: \"goldenrod\" },\n  { name: \"color\", count: 7, color: \"rebeccapurple\" },\n  { name: \"color\", count: 8, color: \"cyan\" },\n];\n\nconst shuffle = (arra1) => {\n  var ctr = arra1.length,\n    temp,\n    index;\n  while (ctr > 0) {\n    index = Math.floor(Math.random() * ctr);\n    ctr--;\n    temp = arra1[ctr];\n    arra1[ctr] = arra1[index];\n    arra1[index] = temp;\n  }\n  return arra1;\n};\n\nconst Board = (props) => {\n  const [list, setList] = useState(myArray);\n\n  useEffect(() => {\n    const mountArray = shuffle(myArray);\n    setList(mountArray);\n  }, []);\n\n  const handleShuffle = () => {\n    const changes = shuffle([...list]);\n    setList(changes);\n    console.log(\"Shuffle\", myArray, changes);\n  };\n\n  return (\n    <>\n      <div className={styles.container}>\n        {list.map((x, index) => (\n          <div className={styles.cell} key={index}>\n            <div className={styles.h1} style={{ backgroundColor: x.color }}>\n              {x.name} - {x.count}\n            </div>\n          </div>\n        ))}\n      </div>\n      <button className={styles.button} onClick={handleShuffle}>\n        Shuffle\n      </button>\n    </>\n  );\n};\n\nexport default Board;\n","import \"./App.css\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Game />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"game_container__3xALo\",\"cell\":\"game_cell__2VCvy\",\"h1\":\"game_h1__21D27\"};"],"sourceRoot":""}